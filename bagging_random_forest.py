# -------------------------------------------------------------------------
# AUTHOR: Leonardo Langgeng
# FILENAME: bagging_random_forest.py
# SPECIFICATION: Testing random forest on handwritten digits
# FOR: CS 4210- Assignment #3
# TIME SPENT: ~10 hours
# -----------------------------------------------------------*/

# IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard vectors and arrays

# importing some Python libraries
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier
import csv

dbTraining = []
dbTest = []
X_training = []
y_training = []
classVotes = []  # this array will be used to count the votes of each classifier

baseTrue = 0
baseFalse = 0
majTrue = 0
majFalse = 0

# reading the training data from a csv file and populate dbTraining
# --> add your Python code here
with open('optdigits.tra', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for i, row in enumerate(reader):
        dbTraining.append(row)

# reading the test data from a csv file and populate dbTest
# --> add your Python code here
with open('optdigits.tes', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for i, row in enumerate(reader):
        dbTest.append(row)

# inititalizing the class votes for each test sample. Example: classVotes.append([0,0,0,0,0,0,0,0,0,0])
# --> add your Python code here
for each in dbTest:
    classVotes.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

print("Started my base and ensemble classifier ...")

for k in range(
        20):  # we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample

    bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)

    # populate the values of X_training and y_training by using the bootstrapSample
    # --> add your Python code here
    for sample in bootstrapSample:
        X_training.append(sample[0:63])
        y_training.append(sample[64])

    # fitting the decision tree to the data
    clf = tree.DecisionTreeClassifier(criterion='entropy',
                                      max_depth=None)  # we will use a single decision tree without pruning it
    clf = clf.fit(X_training, y_training)

    for i, testSample in enumerate(dbTest):

        # make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
        # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
        # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
        # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
        # this array will consolidate the votes of all classifier for all test samples
        # --> add your Python code here
        prediction = clf.predict([testSample[0:63]])  # predicting
        classVotes[i][int(prediction)] += 1 #tally up

        if k == 0:  # for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
            # --> add your Python code here
            if int(prediction) == int(testSample[64]):  #if prediction is same as truth table
                baseTrue += 1
            else:
                baseFalse += 1

    accuracy = float(baseTrue) / (baseTrue + baseFalse)

    if k == 0:  # for only the first base classifier, print its accuracy here
        # --> add your Python code here
        print("Finished my base classifier (fast but relatively low accuracy) ...")
        print("My base classifier accuracy: " + str(accuracy))
        print("")

# now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together)
# --> add your Python code here

for i, testSample in enumerate(dbTest):
    prediction = classVotes[i].index(max(classVotes[i]))
    truth = int(testSample[64])
    if prediction == truth:
        majTrue += 1
    else:
        majFalse += 1

accuracy = float(majTrue) / (majTrue + majFalse)

# printing the ensemble accuracy here
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(accuracy))
print("")

print("Started Random Forest algorithm ...")



#Create a Random Forest Classifier
clf=RandomForestClassifier(n_estimators=20) #this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

#Fit Random Forest to the training data
clf.fit(X_training,y_training)

#make the Random Forest prediction for each test sample. Example: class_predicted_rf = clf.predict([[3, 1, 2, 1, ...]]
#--> add your Python code here
rfPredict = []

for testSample in dbTest:
    rfPredict.append(int(clf.predict([testSample[0:63]])))

#compare the Random Forest prediction for each test sample with the ground truth label to calculate its accuracy
#--> add your Python code here
rfTrue = 0
rfFalse = 0

for i, each in enumerate(rfPredict):
    if int(each) == int(dbTest[i][64]):   #if predict == truth
        rfTrue += 1
    else:
        rfFalse += 1

accuracy = float(rfTrue) / (rfTrue + rfFalse)

#printing Random Forest accuracy here
print("Random Forest accuracy: " + str(accuracy))

print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")



